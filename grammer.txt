program: procedure // main() - need fix 4sure
functions: function | procedure
function: FUNCTION IDENTIFIER START_ROUND_BRACKETS parameter_list END_ROUND_BRACKETS: type START_CURLY_BRACKETS body END_CURLY_BRACKETS
procedure: FUNCTION IDENTIFIER START_ROUND_BRACKETS parameter_list END_ROUND_BRACKETS: VOID START_CURLY_BRACKETS body END_CURLY_BRACKETS

parameter_list: ARG_ARROW variable1 parameter_list 
              | ARG_ARROW variable1
              ;

body: functions body1 
body1: variable_declarations body2
body2: statements

statements: assignment_statement 
          | function_call_statement 
          | if_statement 
          | if_else_statement 
          | while_statement
          | do_while_statement 
          | for_statement 
          | code_block_statement 
          | return_statement
          ;

assignment_statement: lhs ASSIGNMENT expression SEMICOLON | lhs ASSIGNMENT STRING_LITERAL SEMICOLON
lhs: IDENTIFIER '[' expression ']' | IDENTIFIER

function_call_statement: lhs ASSIGNMENT IDENTIFIER START_ROUND_BRACKETS function_call_statement1
function_call_statement1: expression function_call_statement2 | function_call_statement2
function_call_statement2: COMMA function_call_statement1 | END_ROUND_BRACKETS SEMICOLON

if_statement: IF START_ROUND_BRACKETS expression END_ROUND_BRACKETS statement

if_else_statement: IF START_ROUND_BRACKETS expression END_ROUND_BRACKETS statement ELSE statement 

while_statement: WHILE START_ROUND_BRACKETS expression END_ROUND_BRACKETS statement

do_while_statement: DO statement WHILE START_ROUND_BRACKETS expression END_ROUND_BRACKETS SEMICOLON

for_statement: FOR START_ROUND_BRACKETS lhs ASSIGNMENT expression SEMICOLON expression SEMICOLON lhs ASSIGNMENT expression END_ROUND_BRACKETS statement

code_block_statement: START_CURLY_BRACKETS code_block_statement1
code_block_statement1: variable_declarations code_block_statement1 | code_block_statement2
code_block_statement2: statements code_block_statement2 | code_block_statement3
code_block_statement3: END_CURLY_BRACKETS

return_statement: RETURN expression SEMICOLON

type: BOOL 
    | CHAR
    | INT 
    | REAL 
    | CHAR_POINTER 
    | REAL_POINTER
    | INT_POINTER 
    ;

integer_literal: INTEGER_LITERAL 
               | INTEGER_LITERAL_HEX
               ;
               
bool__literal: FALSE 
             | TRUE
             ;
             
literal_lexemes: bool__literal 
               | CHAR_LITERAL
               | integer_literal 
               | REAL_LITERAL 
               | STRING_LITERAL 
               | IDENTIFIER
               ;

variable_declarations: variable 
                     | string
                     ;

--Variable Declarations-- 
variable: VAR variable1
variable1: IDENTIFIER variable2 | IDENTIFIER = literal_lexemes variable2
variable2: COMMA variable1 | ":" type SEMICOLON

--Strings (character arrays)--
string: STRING string1
string1: IDENTIFIER START_SQUARE_BRACKETS integer_litearal END_SQUARE_BRACKETS string2 | IDENTIFIER START_SQUARE_BRACKETS integer_litearal END_SQUARE_BRACKETS = literal_lexemes string2
string2: COMMA string1 | SEMICOLON

expression: expression operator expression 
          | operator expression 
          | literal_lexemes
          ;
          
operator: AND
        | DIVIDE
        | EQUALS
        | GREATER_THAN 
        | GREATER_EQUALS
        | LOWER_THAN
        | LOWER_EQUALS
        | SUBTRACT
        | NOT
        | NOT_EQUALS
        | OR
        | ADD 
        | MULTIPLY
        ;
